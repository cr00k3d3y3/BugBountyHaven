#!/usr/bin/env python3
# lfi_reporter.py
# Description: Generate a markdown report for detected LFI vulnerabilities

import sys
import datetime

def generate_report(vulnerable_payloads, target_url):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    report = f"""# LFI Vulnerability Report

**Target URL:** {target_url}  
**Scan Date:** {timestamp}  

## Detected Vulnerabilities

The following payloads triggered potential LFI responses:

"""
    for payload in vulnerable_payloads:
        report += f"- `{payload}`
"

    report += """

## Recommendations

- Implement strict input validation and allowlisting.
- Avoid dynamic file inclusion using user input.
- Use security mechanisms like WAF and RASP.
- Regularly audit web application code for inclusion patterns.

---

*Report generated by `lfi_reporter.py` as part of automated bug bounty toolkit.*
"""
    return report

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: python3 lfi_reporter.py <target_url> <payload1> [payload2] ...")
        sys.exit(1)

    url = sys.argv[1]
    payloads = sys.argv[2:]
    report = generate_report(payloads, url)

    filename = "LFI_Report.md"
    with open(filename, "w") as f:
        f.write(report)
    print(f"[+] Report saved to {filename}")
